# Generated by Django 4.2.20 on 2025-03-12 14:49

from django.conf import settings
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('scheduler', '0014_course_students_alter_section_students'),
    ]

    operations = [
        migrations.CreateModel(
            name='CourseTypeConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('active', models.BooleanField(default=False)),
                ('enforce_grade_levels', models.BooleanField(default=True, help_text='Strictly enforce grade level requirements for courses')),
                ('allow_mixed_levels', models.BooleanField(default=False, help_text='Allow students from different grade levels in the same course')),
                ('respect_prerequisites', models.BooleanField(default=True, help_text='Enforce course prerequisites')),
            ],
            options={
                'verbose_name': 'Course Type Configuration',
                'verbose_name_plural': 'Course Type Configurations',
            },
        ),
        migrations.CreateModel(
            name='ElectiveConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('active', models.BooleanField(default=False)),
                ('max_electives_per_student', models.IntegerField(default=2, help_text='Maximum number of electives a student can take', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('prioritize_grade_level', models.BooleanField(default=True, help_text='Prioritize grade-level electives over mixed-grade electives')),
                ('allow_mixed_grades', models.BooleanField(default=True, help_text='Allow students from different grades in the same elective')),
            ],
            options={
                'verbose_name': 'Elective Configuration',
                'verbose_name_plural': 'Elective Configurations',
            },
        ),
        migrations.CreateModel(
            name='SchedulingConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('active', models.BooleanField(default=False)),
                ('max_class_size', models.IntegerField(default=30, help_text='Maximum number of students per class', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)])),
                ('max_consecutive_periods', models.IntegerField(default=4, help_text='Maximum number of consecutive periods a teacher can be scheduled', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(8)])),
                ('min_prep_periods', models.IntegerField(default=1, help_text='Minimum number of preparation periods per day', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(4)])),
                ('prioritize_specialized_rooms', models.BooleanField(default=True, help_text='Prioritize assigning specialized rooms (labs, art rooms, etc.) to relevant courses')),
            ],
            options={
                'verbose_name': 'Scheduling Configuration',
                'verbose_name_plural': 'Scheduling Configurations',
            },
        ),
        migrations.CreateModel(
            name='SiblingConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('active', models.BooleanField(default=False)),
                ('keep_siblings_together', models.BooleanField(default=False, help_text='Try to schedule siblings in the same periods when possible')),
                ('priority', models.IntegerField(default=1, help_text='Priority level for sibling scheduling preferences (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
            ],
            options={
                'verbose_name': 'Sibling Configuration',
                'verbose_name_plural': 'Sibling Configurations',
            },
        ),
        migrations.CreateModel(
            name='StudentGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Name for this student group (e.g., 'Behavior Group A')", max_length=100)),
                ('description', models.TextField(blank=True, help_text='Optional notes about why these students should be grouped together or separated')),
                ('priority', models.IntegerField(choices=[(5, 'Highest Priority - Must be separated'), (4, 'High Priority'), (3, 'Medium Priority'), (2, 'Low Priority'), (1, 'Lowest Priority - Try to separate if possible')], default=3, help_text="Priority level for this group's scheduling preferences")),
                ('students', models.ManyToManyField(help_text='Students in this group', limit_choices_to={'role': 'STUDENT'}, related_name='student_groups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student Group',
                'verbose_name_plural': 'Student Groups',
                'ordering': ['-priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='StudentGroupConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('active', models.BooleanField(default=False)),
                ('respect_separation_groups', models.BooleanField(default=True, help_text='Try to keep students in separation groups in different classes')),
                ('respect_grouping_preferences', models.BooleanField(default=True, help_text='Try to honor student grouping preferences when possible')),
                ('priority', models.IntegerField(default=2, help_text='Priority level for group scheduling preferences (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
            ],
            options={
                'verbose_name': 'Student Group Configuration',
                'verbose_name_plural': 'Student Group Configurations',
            },
        ),
        migrations.DeleteModel(
            name='RoomConfiguration',
        ),
        migrations.RemoveField(
            model_name='schedule',
            name='course',
        ),
        migrations.RemoveField(
            model_name='schedule',
            name='period',
        ),
        migrations.RemoveField(
            model_name='schedule',
            name='room',
        ),
        migrations.RemoveField(
            model_name='schedule',
            name='students',
        ),
        migrations.DeleteModel(
            name='StudentConfiguration',
        ),
        migrations.AlterUniqueTogether(
            name='studentpreference',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='studentpreference',
            name='course',
        ),
        migrations.RemoveField(
            model_name='studentpreference',
            name='student',
        ),
        migrations.RemoveField(
            model_name='studentseparationgroup',
            name='students',
        ),
        migrations.DeleteModel(
            name='TeacherConfiguration',
        ),
        migrations.DeleteModel(
            name='Schedule',
        ),
        migrations.DeleteModel(
            name='StudentPreference',
        ),
        migrations.DeleteModel(
            name='StudentSeparationGroup',
        ),
    ]
