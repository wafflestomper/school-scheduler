# Generated by Django 4.2.20 on 2025-03-12 21:23

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('ADMIN', 'Administrator'), ('TEACHER', 'Teacher'), ('STUDENT', 'Student')], max_length=10)),
                ('user_id', models.CharField(default='LEGACY', help_text='Unique identifier for all users', max_length=50, unique=True)),
                ('grade_level', models.IntegerField(blank=True, help_text='Grade level (for students only)', null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female')], help_text="User's gender (optional)", max_length=1, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(blank=True, help_text='Simple course code (e.g., English7)', max_length=20, null=True, unique=True)),
                ('description', models.TextField(blank=True)),
                ('num_sections', models.IntegerField(default=1, help_text='Number of sections to be offered for this course')),
                ('max_students_per_section', models.IntegerField(default=30, help_text='Maximum number of students per section')),
                ('grade_level', models.IntegerField()),
                ('duration', models.CharField(choices=[('QUARTER', 'Quarter'), ('TRIMESTER', 'Trimester'), ('YEAR', 'Full Year')], default='TRIMESTER', max_length=10)),
                ('course_type', models.CharField(choices=[('REQUIRED', 'Required'), ('ELECTIVE', 'Elective')], default='REQUIRED', max_length=10)),
                ('students', models.ManyToManyField(blank=True, help_text='Students registered for this course (to be assigned to sections by the scheduler)', limit_choices_to={'role': 'STUDENT'}, related_name='registered_courses', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CourseTypeConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('active', models.BooleanField(default=False)),
                ('enforce_grade_levels', models.BooleanField(default=True, help_text='Strictly enforce grade level requirements for courses')),
                ('allow_mixed_levels', models.BooleanField(default=False, help_text='Allow students from different grade levels in the same course')),
                ('respect_prerequisites', models.BooleanField(default=True, help_text='Enforce course prerequisites')),
            ],
            options={
                'verbose_name': 'Course Type Configuration',
                'verbose_name_plural': 'Course Type Configurations',
            },
        ),
        migrations.CreateModel(
            name='ElectiveConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('active', models.BooleanField(default=False)),
                ('max_electives_per_student', models.IntegerField(default=2, help_text='Maximum number of electives a student can take', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('prioritize_grade_level', models.BooleanField(default=True, help_text='Prioritize grade-level electives over mixed-grade electives')),
                ('allow_mixed_grades', models.BooleanField(default=True, help_text='Allow students from different grades in the same elective')),
            ],
            options={
                'verbose_name': 'Elective Configuration',
                'verbose_name_plural': 'Elective Configurations',
            },
        ),
        migrations.CreateModel(
            name='Period',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
            ],
            options={
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('capacity', models.IntegerField()),
                ('description', models.TextField(blank=True)),
                ('is_science_lab', models.BooleanField(default=False, help_text='Whether this room is equipped as a science lab')),
                ('is_art_room', models.BooleanField(default=False, help_text='Whether this room is equipped for art classes')),
                ('is_gym', models.BooleanField(default=False, help_text='Whether this room is a gymnasium or physical education space')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SchedulingConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('active', models.BooleanField(default=False)),
                ('max_class_size', models.IntegerField(default=30, help_text='Maximum number of students per class', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)])),
                ('max_consecutive_periods', models.IntegerField(default=4, help_text='Maximum number of consecutive periods a teacher can be scheduled', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(8)])),
                ('min_prep_periods', models.IntegerField(default=1, help_text='Minimum number of preparation periods per day', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(4)])),
                ('prioritize_specialized_rooms', models.BooleanField(default=True, help_text='Prioritize assigning specialized rooms (labs, art rooms, etc.) to relevant courses')),
            ],
            options={
                'verbose_name': 'Scheduling Configuration',
                'verbose_name_plural': 'Scheduling Configurations',
            },
        ),
        migrations.CreateModel(
            name='SiblingConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('active', models.BooleanField(default=False)),
                ('keep_siblings_together', models.BooleanField(default=False, help_text='Try to schedule siblings in the same periods when possible')),
                ('priority', models.IntegerField(default=1, help_text='Priority level for sibling scheduling preferences (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
            ],
            options={
                'verbose_name': 'Sibling Configuration',
                'verbose_name_plural': 'Sibling Configurations',
            },
        ),
        migrations.CreateModel(
            name='StudentGroupConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('active', models.BooleanField(default=False)),
                ('respect_separation_groups', models.BooleanField(default=True, help_text='Try to keep students in separation groups in different classes')),
                ('respect_grouping_preferences', models.BooleanField(default=True, help_text='Try to honor student grouping preferences when possible')),
                ('priority', models.IntegerField(default=2, help_text='Priority level for group scheduling preferences (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
            ],
            options={
                'verbose_name': 'Student Group Configuration',
                'verbose_name_plural': 'Student Group Configurations',
            },
        ),
        migrations.CreateModel(
            name='StudentGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Name for this student group (e.g., 'Behavior Group A')", max_length=100)),
                ('description', models.TextField(blank=True, help_text='Optional notes about why these students should be grouped together or separated')),
                ('priority', models.IntegerField(choices=[(5, 'Highest Priority - Must be separated'), (4, 'High Priority'), (3, 'Medium Priority'), (2, 'Low Priority'), (1, 'Lowest Priority - Try to separate if possible')], default=3, help_text="Priority level for this group's scheduling preferences")),
                ('students', models.ManyToManyField(help_text='Students in this group', limit_choices_to={'role': 'STUDENT'}, related_name='student_groups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student Group',
                'verbose_name_plural': 'Student Groups',
                'ordering': ['-priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SiblingGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Family name or identifier for this sibling group', max_length=100)),
                ('students', models.ManyToManyField(help_text='Students who are siblings in this family', limit_choices_to={'role': 'STUDENT'}, related_name='sibling_group', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Sibling Group',
                'verbose_name_plural': 'Sibling Groups',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_number', models.IntegerField(help_text='Section number (e.g., 1, 2, 3)')),
                ('name', models.CharField(help_text='Generated section name (e.g., English7-1)', max_length=150, unique=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='scheduler.course')),
                ('period', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sections', to='scheduler.period')),
                ('room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sections', to='scheduler.room')),
                ('students', models.ManyToManyField(blank=True, help_text='Students assigned to this section by the scheduler', limit_choices_to={'role': 'STUDENT'}, related_name='assigned_sections', to=settings.AUTH_USER_MODEL)),
                ('teacher', models.ForeignKey(blank=True, limit_choices_to={'role': 'TEACHER'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='taught_sections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['course', 'section_number'],
                'unique_together': {('course', 'section_number')},
            },
        ),
    ]
